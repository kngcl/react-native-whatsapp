{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { storage } from \"./config/firebase\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { nanoid } from \"nanoid\";\nimport \"react-native-get-random-values\";\nexport function pickImage() {\n  return _pickImage.apply(this, arguments);\n}\nfunction _pickImage() {\n  _pickImage = _asyncToGenerator(function* () {\n    var result = yield ImagePicker.launchCameraAsync();\n    return result;\n  });\n  return _pickImage.apply(this, arguments);\n}\nexport function askForPermission() {\n  return _askForPermission.apply(this, arguments);\n}\nfunction _askForPermission() {\n  _askForPermission = _asyncToGenerator(function* () {\n    var _yield$ImagePicker$re = yield ImagePicker.requestCameraPermissionsAsync(),\n      status = _yield$ImagePicker$re.status;\n    return status;\n  });\n  return _askForPermission.apply(this, arguments);\n}\nexport function uploadImage(_x, _x2, _x3) {\n  return _uploadImage.apply(this, arguments);\n}\nfunction _uploadImage() {\n  _uploadImage = _asyncToGenerator(function* (uri, path, fname) {\n    var blob = yield new Promise(function (resolve, reject) {\n      var xhr = new XMLHttpRequest();\n      xhr.onload = function () {\n        resolve(xhr.response);\n      };\n      xhr.onerror = function (e) {\n        console.log(e);\n        reject(new TypeError(\"Network request failed\"));\n      };\n      xhr.responseType = \"blob\";\n      xhr.open(\"GET\", uri, true);\n      xhr.send(null);\n    });\n    var fileName = fname || nanoid();\n    var imageRef = ref(storage, path + \"/\" + fileName + \".jpeg\");\n    var snapshot = yield uploadBytes(imageRef, blob, {\n      contentType: \"image/jpeg\"\n    });\n    blob.close();\n    var url = yield getDownloadURL(snapshot.ref);\n    return {\n      url: url,\n      fileName: fileName\n    };\n  });\n  return _uploadImage.apply(this, arguments);\n}\nvar palette = {\n  tealGreen: \"#128c7e\",\n  tealGreenDark: \"#075e54\",\n  green: \"#25d366\",\n  lime: \"#dcf8c6\",\n  skyblue: \"#34b7f1\",\n  smokeWhite: \"#ece5dd\",\n  white: \"white\",\n  gray: \"#3C3C3C\",\n  lightGray: \"#757575\",\n  iconGray: \"#717171\"\n};\nexport var theme = {\n  colors: {\n    background: palette.smokeWhite,\n    foreground: palette.tealGreenDark,\n    primary: palette.tealGreen,\n    tertiary: palette.lime,\n    secondary: palette.green,\n    white: palette.white,\n    text: palette.gray,\n    secondaryText: palette.lightGray,\n    iconGray: palette.iconGray\n  }\n};","map":{"version":3,"names":["ImagePicker","storage","getDownloadURL","ref","uploadBytes","nanoid","pickImage","_pickImage","apply","arguments","_asyncToGenerator","result","launchCameraAsync","askForPermission","_askForPermission","_yield$ImagePicker$re","requestCameraPermissionsAsync","status","uploadImage","_x","_x2","_x3","_uploadImage","uri","path","fname","blob","Promise","resolve","reject","xhr","XMLHttpRequest","onload","response","onerror","e","console","log","TypeError","responseType","open","send","fileName","imageRef","snapshot","contentType","close","url","palette","tealGreen","tealGreenDark","green","lime","skyblue","smokeWhite","white","gray","lightGray","iconGray","theme","colors","background","foreground","primary","tertiary","secondary","text","secondaryText"],"sources":["/home/evance/projects/Watsapp-react-native/utils.js"],"sourcesContent":["import * as ImagePicker from \"expo-image-picker\";\nimport { storage } from \"./config/firebase\";\nimport { getDownloadURL, ref, uploadBytes } from \"firebase/storage\";\nimport { nanoid } from \"nanoid\";\nimport \"react-native-get-random-values\";\n\nexport async function pickImage() {\n  let result = await ImagePicker.launchCameraAsync();\n  return result;\n}\n\nexport async function askForPermission() {\n  const { status } = await ImagePicker.requestCameraPermissionsAsync();\n  return status;\n}\n\nexport async function uploadImage(uri, path, fname) {\n  const blob = await new Promise((resolve, reject) => {\n    const xhr = new XMLHttpRequest();\n    xhr.onload = function () {\n      resolve(xhr.response);\n    };\n    xhr.onerror = function (e) {\n      console.log(e);\n      reject(new TypeError(\"Network request failed\"));\n    };\n    xhr.responseType = \"blob\";\n    xhr.open(\"GET\", uri, true);\n    xhr.send(null);\n  });\n\n  const fileName = fname || nanoid();\n  const imageRef = ref(storage, `${path}/${fileName}.jpeg`);\n\n  const snapshot = await uploadBytes(imageRef, blob, {\n    contentType: \"image/jpeg\",\n  });\n\n  blob.close();\n\n  const url = await getDownloadURL(snapshot.ref);\n\n  return { url, fileName };\n}\n\nconst palette = {\n  tealGreen: \"#128c7e\",\n  tealGreenDark: \"#075e54\",\n  green: \"#25d366\",\n  lime: \"#dcf8c6\",\n  skyblue: \"#34b7f1\",\n  smokeWhite: \"#ece5dd\",\n  white: \"white\",\n  gray: \"#3C3C3C\",\n  lightGray: \"#757575\",\n  iconGray: \"#717171\",\n};\n\nexport const theme = {\n  colors: {\n    background: palette.smokeWhite,\n    foreground: palette.tealGreenDark,\n    primary: palette.tealGreen,\n    tertiary: palette.lime,\n    secondary: palette.green,\n    white: palette.white,\n    text: palette.gray,\n    secondaryText: palette.lightGray,\n    iconGray: palette.iconGray,\n  },\n};\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}