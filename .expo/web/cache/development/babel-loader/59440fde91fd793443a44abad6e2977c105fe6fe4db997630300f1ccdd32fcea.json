{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\nimport { collection, onSnapshot, query, where } from \"@firebase/firestore\";\nimport React, { useContext, useEffect } from \"react\";\nimport View from \"react-native-web/dist/exports/View\";\nimport GlobalContext from \"../../context/Context\";\nimport { auth, db } from \"../../config/firebase\";\nimport ContactsFloatingIcon from \"../../components/ContactsFloatingIcon\";\nimport ListItem from \"../../components/ListItem\";\nimport useContacts from \"../../hooks/useHook\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function Chats() {\n  var currentUser = auth.currentUser;\n  var _useContext = useContext(GlobalContext),\n    rooms = _useContext.rooms,\n    setRooms = _useContext.setRooms,\n    setUnfilteredRooms = _useContext.setUnfilteredRooms;\n  var contacts = useContacts();\n  var chatsQuery = query(collection(db, \"rooms\"), where(\"participantsArray\", \"array-contains\", currentUser.email));\n  useEffect(function () {\n    var unsubscribe = onSnapshot(chatsQuery, function (querySnapshot) {\n      var parsedChats = querySnapshot.docs.map(function (doc) {\n        return _objectSpread(_objectSpread({}, doc.data()), {}, {\n          id: doc.id,\n          userB: doc.data().participants.find(function (p) {\n            return p.email !== currentUser.email;\n          })\n        });\n      });\n      setUnfilteredRooms(parsedChats);\n      setRooms(parsedChats.filter(function (doc) {\n        return doc.lastMessage;\n      }));\n    });\n    return function () {\n      return unsubscribe();\n    };\n  }, []);\n  function getUserB(user, contacts) {\n    var userContact = contacts.find(function (c) {\n      return c.email === user.email;\n    });\n    if (userContact && userContact.contactName) {\n      return _objectSpread(_objectSpread({}, user), {}, {\n        contactName: userContact.contactName\n      });\n    }\n    return user;\n  }\n  return _jsxs(View, {\n    style: {\n      flex: 1,\n      padding: 5,\n      paddingRight: 10\n    },\n    children: [rooms == null ? void 0 : rooms.map(function (room) {\n      return _jsx(ListItem, {\n        type: \"chat\",\n        description: room.lastMessage.text,\n        room: room,\n        time: room.lastMessage.createdAt,\n        user: getUserB(room.userB, contacts)\n      }, room.id);\n    }), _jsx(ContactsFloatingIcon, {})]\n  });\n}","map":{"version":3,"names":["collection","onSnapshot","query","where","React","useContext","useEffect","View","GlobalContext","auth","db","ContactsFloatingIcon","ListItem","useContacts","jsx","_jsx","jsxs","_jsxs","Chats","currentUser","_useContext","rooms","setRooms","setUnfilteredRooms","contacts","chatsQuery","email","unsubscribe","querySnapshot","parsedChats","docs","map","doc","_objectSpread","data","id","userB","participants","find","p","filter","lastMessage","getUserB","user","userContact","c","contactName","style","flex","padding","paddingRight","children","room","type","description","text","time","createdAt"],"sources":["/home/evance/projects/Watsapp-react-native/src/screens/Chats.tsx"],"sourcesContent":["import { collection, onSnapshot, query, where } from \"@firebase/firestore\";\nimport React, { useContext, useEffect } from \"react\";\nimport { View, Text } from \"react-native\";\nimport GlobalContext from \"../../context/Context\";\nimport { auth, db } from \"../../config/firebase\";\nimport ContactsFloatingIcon from \"../../components/ContactsFloatingIcon\";\nimport ListItem from \"../../components/ListItem\";\nimport useContacts from \"../../hooks/useHook\";\nexport default function Chats() {\n  const { currentUser } = auth;\n  const { rooms, setRooms, setUnfilteredRooms } = useContext<any>(GlobalContext);\n  const contacts = useContacts();\n  const chatsQuery = query(\n    collection(db, \"rooms\"),\n    where(\"participantsArray\", \"array-contains\", currentUser.email)\n  );\n  useEffect(() => {\n    const unsubscribe = onSnapshot(chatsQuery, (querySnapshot) => {\n      const parsedChats = querySnapshot.docs.map((doc) => ({\n        ...doc.data(),\n        id: doc.id,\n        userB: doc\n          .data()\n          .participants.find((p:any) => p.email !== currentUser.email),\n      }));\n      setUnfilteredRooms(parsedChats);\n      setRooms(parsedChats.filter((doc:any) => doc.lastMessage));\n    });\n    return () => unsubscribe();\n  }, []);\n\n  function getUserB(user:any, contacts:any) {\n    const userContact = contacts.find((c:any) => c.email === user.email);\n    if (userContact && userContact.contactName) {\n      return { ...user, contactName: userContact.contactName };\n    }\n    return user;\n  }\n\n  return (\n    <View style={{ flex: 1, padding: 5, paddingRight: 10 }}>\n      {rooms?.map((room:any) => (\n        <ListItem\n          type=\"chat\"\n          description={room.lastMessage.text}\n          key={room.id}\n          room={room}\n          time={room.lastMessage.createdAt}\n          user={getUserB(room.userB, contacts)}\n        />\n      ))}\n      <ContactsFloatingIcon />\n    </View>\n  );\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}